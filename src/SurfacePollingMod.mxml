<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:services="services.*"
			   backgroundColor="#3f403e"
			   creationComplete="fadeSplashShow.play();init(event)"    
			   currentState="start" exitState="doExit(event)"

			   height.menu="688"
			   width.questions="100%" height.questions="100%"
			   width.start="1200" height.start="100%">
	
	<s:states>
		<s:State name="start"/>
		<s:State name="questions"/>
		<s:State name="menu"/>
		<s:State name="title"/>
		<s:State name="choosepoll"/>
	</s:states>
	
	<fx:Declarations>
		<s:Sequence id="fadeSplashHide" duration="2000" effectEnd="initializeRole();"
					target="{splash}">
			<s:Fade id="fadeHide" alphaFrom="1.0" alphaTo="0.0"/>
			<s:Resize id="resizeHide" heightTo="0" widthTo="0"/>
		</s:Sequence>        
		
		<s:Parallel id="fadeSplashShow" duration="2000" target="{splash}">
			<s:Fade id="fadeShow" alphaFrom="0.0" alphaTo="1.0"/>
		</s:Parallel>
		
		<s:Sequence id="fadeMenu" duration="2000" effectEnd="currentState='questions'" target="">
			<s:Fade id="fadeMenuHide" alphaFrom="1.0" alphaTo="0.0"/>
		</s:Sequence> 
		
		<s:Sequence id="fadeTitle" duration="2000" effectEnd="currentState='menu'" target="">
			<s:Fade id="fadeTitleHide" alphaFrom="1.0" alphaTo="0.0"/>
		</s:Sequence> 
		
		<s:Parallel id="fadeHelpOpen" duration="1000" target="{helpBtns}">
			<s:Fade id="fadeHelp" alphaFrom="0.0" alphaTo="1.0"/>
		</s:Parallel>
		
		<s:Parallel id="fadeHelpClose" duration="1000" target="{helpBtns}">
			<s:Fade id="fadeHelp2" alphaFrom="1.0" alphaTo="0.0"/>
		</s:Parallel>
		
		<s:CallResponder id="getPollAnswersResult"/>
		<services:SimplePollDataServiceDestination id="simplePollDataServiceDestination"
												   fault="showFault(event)"
												   result="showDataResults(event)"
												   showBusyCursor="true"/>
		<services:SimplePollQuestionServiceDestination id="simplePollQuestionServiceDestination"
													   fault="showFault(event)"
													   result="showQuestionResults(event)"
													   showBusyCursor="true"/>
		<services:SimplePollAnswersServiceDestination id="simplePollAnswersServiceDestination"
													  fault="showFault(event)"
													  result="showAnswersResults(event)"
													  showBusyCursor="true"/>
		<services:SimplePollChoiceServiceDestination id="simplePollChoiceServiceDestination"
													 fault="showFault(event)"
													 result="showChoiceResults(event)"
													 showBusyCursor="true"/>
		<s:CallResponder id="getPollQuestionsResult"/>
		
	</fx:Declarations>
		<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		@font-face {
			src: url("skins/Gotham-Book.ttf");
			fontFamily: "Gotham";
			embedAsCFF: true;
		}
		
		@font-face {
			src: url("skins/Gotham-Bold.ttf");
			fontFamily: "GothamBold";
			embedAsCFF: true;
		}
		
		s|TextArea {
			backgroundAlpha: 0.0;
			fontFamily: Gotham;
			fontSize:26;
			color: #cecece;
			contentBackgroundColor:black;
			contentBackgroundAlpha: 0.2;
			paddingTop: 20;
			paddingLeft: 20;
		}
		.title {
			fontFamily: Gotham;
			fontSize:22;
			color: #6f6f6f;
		}
		.date {
			fontFamily: Gotham;
			fontSize:22;
			color: red;
		}
		.myButtonStyle { 
			skinClass:ClassReference("skins.AnswerButton"); 
		}
		.myButtonStyleA { 
			skinClass:ClassReference("skins.AnswerButtonA"); 
		}
		.myButtonStyleB { 
			skinClass:ClassReference("skins.AnswerButtonB"); 
		}
		.myButtonStyleC { 
			skinClass:ClassReference("skins.AnswerButtonC"); 
		}
		.myButtonStyleD { 
			skinClass:ClassReference("skins.AnswerButtonD"); 
		}
		.myButtonStyleE { 
			skinClass:ClassReference("skins.AnswerButtonE"); 
		}
		.myButtonMenu{ 
			skinClass:ClassReference("skins.MenuButton"); 
		}
		.myButtonReviewMenu{ 
			skinClass:ClassReference("skins.MenuReviewButton"); 
		}
		.myButtonReview { 
			skinClass:ClassReference("skins.SmallerButton"); 
		}
		.myRefreshStyle { 
				skinClass:ClassReference("skins.RefreshButton"); 
			}
		.totalSeries {
			fontSize:22;
			fontWeight:bold;
			labelPosition:inside;
			labelAlign:center;
			paddingTop: 20;
		}
		.labelText {
			fontFamily: Gotham;
			fontSize:24;
			color: #cecece;
			labelPosition:inside;
			z-index: 22;
		}
		
	</fx:Style>
	
	<fx:Metadata>
		[Event(name="customClose", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import flash.display.Loader;
			import flash.events.Event;
			import flash.events.HTTPStatusEvent;
			import flash.events.IEventDispatcher;
			import flash.events.IOErrorEvent;
			import flash.events.MouseEvent;
			import flash.events.NetStatusEvent;
			import flash.events.ProgressEvent;
			import flash.events.SecurityErrorEvent;
			import flash.events.SyncEvent;
			import flash.events.TimerEvent;
			import flash.external.ExternalInterface;
			import flash.net.SharedObject;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.events.FlexEvent;
			import mx.managers.PopUpManager;
			import mx.managers.PopUpManagerChildList;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.Button;
			import spark.components.HGroup;
			import spark.components.VGroup;
			import spark.events.IndexChangeEvent;
			
			import events.CustomEvent;
			
			import skins.AnswerButton;
			
			import utils.Red5Connection;
			
			import vo.ResponseObject;
			
			
			private var loader:URLLoader;
			private var xmlDocToLoad:String;
			private var currPoll:int = 1;
			private var currQuestion:Number = 1;
			private var answerCount:int;
			private var so:SharedObject;
			private var soTot:SharedObject;
			private var soQ:SharedObject;
			private var soP:SharedObject;
			private var soIdx:SharedObject;
			private var soRev:SharedObject;
			protected var ttlWndw:TitleWin;
			protected var askWndw:AskWin;
			private var deviceName:String;
			private var reviewResults:ArrayCollection;
			private var pollId:int;
			private var visitId:String;
			private var skinFile:String;
			
			private var questionStr:String;
			public var image_loader:Loader;
			private var nuAnswer:int;
			private var totQuestions:int;
			public var reviewMode:String;
			private var menuCreated:Boolean = false;
			private var connected:Boolean = false;
			private var timer:Timer;
			
			private var modTimer:Timer;
			private var totalAnswers:int = 0;
			public var nc:Red5Connection;
			private var revBtn:Button;
			private var backBtn:Button;
			private var btnGroup:HGroup;
			private var askBtn:Button;
			private var localSo:SharedObject;
			private var currButton:Object;
			private var testLabels:Array = ["A", "B", "C", "D", "E"];
			private var btnStylesArray:Array = [".myButtonStyleA", ".myButtonStyleB", ".myButtonStyleC", ".myButtonStyleD", ".myButtonStyleE"];
			private var answersTemplate:String;
			
			private var pollSync:Boolean;
			private var participantTitle:String;
			private var currQuestionIndex:Number;
			private var useTextBool:String;
			private var hideResults:String = "false";
			private var dataExists:Boolean = false;
			private var firstRun:Boolean = true;
			private var helpOn:Boolean = false;
			//private var onQuestion:String = "false";
			
			[Bindable]
			private var externalXML:XML;
			
			[Bindable]
			private var questionsArray:ArrayCollection = new ArrayCollection(); 
			
			[Bindable]
			private var answersArray:ArrayCollection;
			
			[Bindable]
			private var pollsArray:ArrayCollection;
			
			[Bindable]
			private var runningTotalA:Number = 0;
			
			[Bindable]
			private var runningTotalB:Number = 0;
			
			[Bindable]
			private var runningTotalC:Number = 0;
			
			[Bindable]
			private var runningTotalD:Number = 0;
			
			[Bindable]
			private var runningTotalE:Number = 0;
			
			[Bindable]
			private var grandTotal:Number = 0;
			
			[Bindable]
			private var aPct:Number;
			
			[Bindable]
			private var bPct:Number;
			
			[Bindable]
			private var cPct:Number;
			
			[Bindable]
			private var dPct:Number;
			
			[Bindable]
			private var ePct:Number;
			
			[Bindable]
			private var myData:Array;
			
			[Bindable]
			private var soArray:Array;
			
			[Bindable]
			private var yourTitle:String;
			
			[Bindable]
			private var titleDropEnabled:Boolean = true;
			
			[Bindable]
			private var dropIndex:Number;
			
			[Bindable]
			private var role:String = "";
			
			[Bindable]
			private var myTitle:String;
			
			private var today_date:Date = new Date();
			private var monthNames_array:Array = new Array("January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December");
			
			[Bindable]
			private var date_str:String = (monthNames_array[today_date.getMonth()]+" "+today_date.getDate()+", "+today_date.getFullYear());
			
			
			private var ip:String;
			
			private function init(ev:FlexEvent):void 
			{			
				// init some vars
				reviewMode = "false";
				myData = new Array();
				debugText.visible = true;	
				
				// NC connect/disconnect Timer
				startTimer();
				
				localSo = SharedObject.getLocal("ccmpolling");
				if(localSo.data.pollResults == null) {
					localSo.data.pollResults = new Array();
				}			
				
				// now hide splash screen
				fadeSplashHide.play();					
			}
			
			private function startTimer():void {
				// every 60s
				timer = new Timer(60000);
				// handler at end of code
				timer.addEventListener(TimerEvent.TIMER, onTimer);
				timer.start();
			}
			
			protected function initializeRole():void 
			{
				// Flashvars initialize vars				
				visitId = FlexGlobals.topLevelApplication.parameters.visitId;
				skinFile = FlexGlobals.topLevelApplication.parameters.skinFile;
				ip = FlexGlobals.topLevelApplication.parameters.ipAddress;
				myTitle = FlexGlobals.topLevelApplication.parameters.title;
				useTextBool = FlexGlobals.topLevelApplication.parameters.useText;
				
				// after Splash fade and role is determined...
				currentState = 'menu';
				bgImage.source = "http://"+ip+":8080/MySQLWebProject/assets/"+skinFile;
				setUpNetConnection();
				
				nc.call("updatePoll", null, 1 );				
			}
			
			private function loadQuestions(val:int):void 
			{
				// pass Poll id (9999 are the participant polls)
				simplePollQuestionServiceDestination.getPollQuestions(val);		
			}
			
			// listeners
			private function configureListeners(dispatcher:IEventDispatcher):void {
				dispatcher.addEventListener(Event.COMPLETE, completeHandler);
				dispatcher.addEventListener(Event.OPEN, openHandler);
				dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
				dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
				dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			
			}
			
			// set up MC
			private function setUpNetConnection():void {
				debug("set up connection");
				// NetConnection Singleton
				nc = new Red5Connection();
				// we only own 60 tablets, cushion
				nc.maxPeerConnections = 80;
				nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityNCErrorHandler);
				
				// rtmp uses 1935, so don't put in 5030 here. duh
				nc.connect("rtmp://"+ip+"/SimplePoll");
				nc.client = this;
			}
			// NetConnection handlers
			private function netStatusHandler(event:NetStatusEvent):void 
			{
				if(nc.connected) {
					debug("connected to Red5 " + nc.maxPeerConnections + " uri: " + nc.uri);
					connected = true;
					// Shared object stuff
					
					so = SharedObject.getRemote("message", nc.uri, false);
					soTot = SharedObject.getRemote("total", nc.uri, false);					
					soQ = SharedObject.getRemote("currentQuestion", nc.uri, false);
					soP = SharedObject.getRemote("currentPoll", nc.uri, false);
					soIdx = SharedObject.getRemote("currentIndex", nc.uri, false);
					soRev = SharedObject.getRemote("reviewMode", nc.uri, false);
					
					so.addEventListener(SyncEvent.SYNC,onSync);
					soTot.addEventListener(SyncEvent.SYNC,onSync);
					soQ.addEventListener(SyncEvent.SYNC,onQuestionSync);
					soP.addEventListener(SyncEvent.SYNC, onPollSync);
					soIdx.addEventListener(SyncEvent.SYNC, onIndexSync);
					soRev.addEventListener(SyncEvent.SYNC, onReviewSync);
					
					so.client = this;
					so.connect(nc);
					soTot.client = this;
					soTot.connect(nc);
					soQ.client = this;
					soQ.connect(nc);
					soP.client = this;
					soP.connect(nc);
					soIdx.client = this;
					soIdx.connect(nc);
					soRev.client = this;
					soRev.connect(nc);
					
					handleNCState();
				} else {
					debug("Could not connect to media server.");
					connected = false;
				}					
			}
			
			// Handle NetConnection state
			private function handleNCState():void 
			{	
				// go to menu
				nc.call("sendMessage", null, "menu");
				
				// stop "double" menus from being created				
				if(menuCreated == false) {
					createMenu();
				}
			}
			
			private function securityNCErrorHandler(event:SecurityErrorEvent):void 
			{
				debug("NO RED 5");
			}
			
			// load XML and show CCM logo, fade it
			private function completeHandler(event:Event):void {
				
			}
			
			// create menu buttons
			private function createMenu():void 
			{	
				//Alert.show("create the menu dude");
				
				currentState = 'menu';
				
				totQuestions = questionsArray.length;
				menuGroup.removeAllElements();
				menuGroup.horizontalCenter = true;
				menuGroup.width = 1121;
				menuGroup.height = 265;
				menuGroup.maxWidth = 1121;
				menuGroup.x = 81;
				menuGroup.y = 264;
				
				if(menuCreated == false) {
					debug("get poll ids");
					simplePollChoiceServiceDestination.getPollIds();	
				} 
				// loop through total num of questions and build menu buttons
				for(var i:int = 1; i <= totQuestions; i++) {
					var strQuest:String = String(questionsArray[i-1].questionId);
					
					var menuBtn:Button = new Button();
					if(currPoll < 9999) {
						menuBtn.label = "Event " + i;
					} else {
						menuBtn.label = "Live " + i;
					}
					menuBtn.id = String(i);
					menuBtn.width = 160;
					menuBtn.height = 40;
					menuBtn.addEventListener(MouseEvent.CLICK, onMenuButtonClick);
					// if SharedObj data exists for this question, apply "red" skin
					if(localSo.data.pollResults["question"+strQuest]) {
						menuBtn.styleName = "myButtonReviewMenu";	
					} else {
						menuBtn.styleName = "myButtonMenu";	
					}
					
					menuGroup.addElement(menuBtn);					
					addElement(menuGroup);
					// the menu has been created
					menuCreated = true;
				}
				
				// moderator can "drive" the menu
				menuGroup.enabled = true;

				
				// hide dynamic title/date in Menu
				if(useTextBool == "false") {
					date.text = "";
					title.text = "";
				}
	
			}
			
			public function readAnswers(val:String, src:String):void 
			{
				debug2("READ ANSWERS " + val + " SRC:" + src);
				currQuestion = int(val);
				simplePollAnswersServiceDestination.getPollAnswers(currQuestion);
			}
			
			/*
			This creates answers as well as sets up btnBox to hold review and back btns
			*/
			public function setUpAnswers():void 
			{								
				try {
					questionStr = questionsArray[currQuestionIndex-1].questionStr;
				}
				catch(err:Error) {}
				
				debug2("CurrQuestion: " + currQuestion + " CurrentIdx: " + currQuestionIndex);
				
				// this will remove answers
				try {
					removeElement(btnBox);
				}
				catch(err:Error) {
					//Alert.show(err.message);
				}
				finally {
					fadeMenu.play();
					menuGroup.visible = false;
					answerCount = 0;
					btnBox = new VGroup();
					btnBox.width = 1000;
					btnBox.height = 500;
					btnBox.x = 55;
					btnBox.y = 30;
					var tempQuest:TextArea = new TextArea();
					tempQuest.left = 53;
					tempQuest. top = 0;
					tempQuest.width = 1065;
					tempQuest.height = 155;
					tempQuest.selectable = false;
					tempQuest.editable = false;
					tempQuest.enabled = true;
					tempQuest.text = questionStr;
					btnBox.addElement(tempQuest);

					//questionTxt.text = questionStr;
					
					for(var j:int = 0; j < answersArray.length; j++) {
						var tempBtn:Button = new Button();
						tempBtn.x = 100;
						tempBtn.styleName = "myButtonStyle"+answersArray[j].labelStr;
						tempBtn.label = answersArray[j].answerStr;
						tempBtn.addEventListener(MouseEvent.CLICK, doPoll);
						tempBtn.id = answersArray[j].labelStr;
						btnBox.addElement(tempBtn);		
						answerCount++;
						totalAnswers++;
					}
					addElement(btnBox);
					// create a 'Back' button
					createBackButton();
					// check for existing data
					reviewPoll();

					
				}
			}
			
			// BACK BUTTON
			protected function createBackButton():void 
			{
				btnGroup = new HGroup();
				backBtn = new Button();
				backBtn.label = "< Back";
				backBtn.styleName = "myButtonReview";
				backBtn.addEventListener(MouseEvent.CLICK, goBack);
				btnGroup.addElement(backBtn);	
				btnBox.addElement(btnGroup);
			}
			
			private function openHandler(event:Event):void {
				trace("openHandler: " + event);
			}
			
			private function progressHandler(event:ProgressEvent):void {
				trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
			}
			
			private function securityErrorHandler(event:SecurityErrorEvent):void {
				trace("securityErrorHandler: " + event);
			}
			
			private function httpStatusHandler(event:HTTPStatusEvent):void {
				trace("httpStatusHandler: " + event);
			}
			
			private function ioErrorHandler(event:IOErrorEvent):void {
				trace("ioErrorHandler: " + event);
			}
			
			// do Poll
			private function doPoll(ev:MouseEvent):void 
			{
				debug("******* " + ev.currentTarget.id);
				
			}
			
			private function getAnswerInt(id:String):int {
				var temp:int;
				switch(id) {
					case "A":
						temp = 1;
						break;
					case "B":
						temp = 2;
						break;
					case "C":
						temp = 3;
						break;
					case "D":
						temp = 4;
						break;
					case "E":
						temp = 5;
						break;
					default:
						temp = int(id);
				}
				return temp;
			}
			
			// called via server/sends back SO data 
			public function receiveTotal(a:String, b:String):void
			{
				debug("receiveTotal: " + a + " " + b);
				var newStr:String = a.substring(0,1);
				
				// add more possibly
				switch(newStr) {
					case "A":
						runningTotalA += Number(b);
						break;
					case "B":
						runningTotalB += Number(b);
						break;
					case "C":
						runningTotalC += Number(b);
						break;
					case "D":
						runningTotalD += Number(b);
						break;
					case "E":
						runningTotalE += Number(b);
						break;
				}
				
				showPopGraph();					
			}
			
			// Receive message from server response from 'nextQuestion' call
			public function getNextMessage(msg:String):void
			{	
				try {
					currQuestion++;
					myData = new Array();
					totalAnswers = 0;
					runningTotalA = 0;
					runningTotalB = 0;
					runningTotalC = 0;
					runningTotalD = 0;
					runningTotalE = 0;
					grandTotal = 0;				
					ttlWndw.countTxt.text = "0";
					removeElement(btnBox);
					readAnswers(currQuestion as String, "getNextMessage");
				}
				catch (err:Error) {
					Alert.show(err.message, "getNextMessage");
				}
			}
			
			private function onMenuButtonClick(ev:MouseEvent):void 
			{
				try {
					firstRun = false;
					// set current question to id of button
					// ev.currentTarget.id is a String, currQuestion is a Number
					currQuestion = Number(ev.currentTarget.id);
					
					debug("menuClick: " + ev.currentTarget.id);		
					
					var newVal:String = String(questionsArray[currQuestion-1].questionId);
					nc.call("updateQuestion", null, newVal);
					
					currButton = ev.currentTarget;
					nc.call("updateIndex", null, ev.currentTarget.id);		
					
					currQuestionIndex = Number(ev.currentTarget.id);
					debug2("currQuestionIndex " + currQuestionIndex);
					
					// broadcast a message with that button number
					nc.call("sendMessage", null, currQuestion);
				}
				catch(err:Error) { }
				
			}
			
			// Receive from server, sent from presenter
			public function receiveMessage(val:String):void 
			{
				//Alert.show("RECEIVE: " + val);
				debug("RECEIVE MSG: " + val);
				switch(val) {
					case "QUIT":
						cleanupSO();
						break;
					case "menu":
						handleMenuState();
						break;
					case "push":
						//handleMenuState();
						//nc.call("updatePoll", null, 1);
						
						break;
					case "back":
						handleMenuState();
						break;
					case "refresh":
						try {
							debug("Refresh...pOLL >>>> " + currPoll);
							var intPoll:int = int(soP.data.currPoll);
							currPoll = soP.data.currPoll;
							loadQuestions(intPoll);
						}
						catch(err:Error) { }
						break;
					case "disable":
						break;
					case "userPush":
						try {
							//simplePollQuestionServiceDestination.getPollQuestions(9999);
						}
						catch(err:Error) {}
						//nc.call("updatePoll", null, 9999);
						break;
					case "sendData":
						try {
							nc.call("updatePoll", null, currPoll, questionsArray.length );
						}
						catch(err:Error) { }
						break;
					default:
						break;
					
				}
				try {
					// check if value received is a numeric
					var testFlag:Boolean = isNaN( Number( val ) );
					
					if(testFlag == false) {				
						// get the question right, here...
						var newVal:String = String(questionsArray[int(val)-1].questionId);
						
						// broadcast an update current question Mod??? though. thought i just did it in menuButtonClick????? wtf????
						nc.call("updateQuestion", null, newVal);
					}
				}
				catch(err:Error) {
	
				}
			}
			
			private function goBack(ev:MouseEvent):void 
			{
				try {
					nc.call("sendMessage", null, "back");
				}
				catch(err:Error) {}
			}
			
			private function onSync(ev:SyncEvent):void 
			{
				// SO sync event, triggered at app start
				debug("onSync...Poll: "+ currPoll + " Question: " + currQuestion);
			}
			
			private function onQuestionSync(e:SyncEvent):void 
			{
				try {
					// SO sync event, triggered at app start
					
					for (var i:String in e.changeList)
					{
						//debug("Server Message: " + e.changeList[i].code)
						debug("Server Message: " + e.changeList[i].name)
					}
					if(soQ.data.currentQuest != undefined) {
						debug("SYNC " + soQ.data.currentQuest);				
						readAnswers(soQ.data.currentQuest, "onQustionSync");
						// set local var to RSO (needed?)
						//currQuestion = soQ.data.currentQuest;
					}		
				}
				catch(err:Error) {}
			}
			
			private function onPollSync(e:SyncEvent):void {		
				try {
					var intPoll:int = int(soP.data.currPoll);
					// set local to RSO
					currPoll = soP.data.currPoll;
					debug("POLL >>>> " + currPoll);
					loadQuestions(intPoll);
					pollDrop.selectedIndex = intPoll-1;					
				}
				catch(err:Error) {
					debug("Poll sync cannot loadQuestions");
				}				
			}
			public function onIndexSync(e:SyncEvent):void {
				var intIndex:int = int(soIdx.data.currIndex);
				currQuestionIndex = Number(soIdx.data.currIndex);
				debug3("IDX: " + currQuestionIndex);
			}
			public function onReviewSync(e:SyncEvent):void {
				// should Mod even handle syncs? Oh, YEAH!
				reviewMode = soRev.data.revMode; 
			}
			// need these for NC, not used
			public function onBWDone(... rest) : void {
				// have to have this for an RTMP connection
				trace('onBWDone');
			}
			
			public function onBWCheck(... rest) : uint {
				trace('onBWCheck');
				//have to return something, so returning anything :)
				return 0;
			} 
			
			protected function showPopGraph():void {
				grandTotal = runningTotalA + runningTotalB + runningTotalC + runningTotalD + runningTotalE;				
				aPct = Math.floor((runningTotalA/grandTotal)*100);
				bPct  = Math.floor((runningTotalB/grandTotal)*100);
				cPct  = Math.floor((runningTotalC/grandTotal)*100);
				dPct  = Math.floor((runningTotalD/grandTotal)*100);
				ePct  = Math.floor((runningTotalE/grandTotal)*100);
				
				// add more possibly/ value objects
				var respA:ResponseObject = new ResponseObject();
				var respB:ResponseObject = new ResponseObject();
				var respC:ResponseObject = new ResponseObject();
				var respD:ResponseObject = new ResponseObject();
				var respE:ResponseObject = new ResponseObject();
				
				respA.label = "A";
				respA.total = runningTotalA;
				respA.myPct = aPct;
				
				respB.label = "B";
				respB.total = runningTotalB;
				respB.myPct = bPct;
				
				respC.label = "C";
				respC.total = runningTotalC;
				respC.myPct = cPct;
				
				respD.label = "D";
				respD.total = runningTotalD;
				respD.myPct = dPct;
				
				respE.label = "E";
				respE.total = runningTotalE;
				respE.myPct = ePct;
				
				// based on total num of questions, show hide data/buttons etc...
				switch(totalAnswers) {
					case 2:
						myData[0] = respA;
						myData[1] = respB;
						break;
					case 3:
						myData[0] = respA;
						myData[1] = respB;
						myData[2] = respC;
						break
					case 4:
						myData[0] = respA;
						myData[1] = respB;
						myData[2] = respC;
						myData[3] = respD;
						break;
					case 5:
						myData[0] = respA;
						myData[1] = respB;
						myData[2] = respC;
						myData[3] = respD;
						myData[4] = respE;
						break;
				}
				if(grandTotal == 1) {
					ttlWndw = PopUpManager.createPopUp(this, TitleWin, true, PopUpManagerChildList.PARENT) as TitleWin;
					PopUpManager.centerPopUp(ttlWndw);
				}
				ttlWndw.addEventListener(CustomEvent.ON_CLOSE_POP, doClose);
				ttlWndw.countTxt.text = String(grandTotal);
				
				// change order
				ttlWndw.myChart.dataProvider = myData.reverse();
				ttlWndw.myCat.dataProvider = myData;
				
				// show/hide results based on Checkbox
				if(hideResults == "true") {
					ttlWndw.showBtn.label = "Show Results";
					ttlWndw.addEventListener(CustomEvent.ON_SHOW_RESULTS, doShowResults);
					ttlWndw.myChart.visible = false;
				} else {
					ttlWndw.showBtn.visible = false;
					ttlWndw.myChart.visible = true;
					ttlWndw.ttlWndwBtns.x = 250;
				}
				
				
			}
			
			public function hidePopGraph():void 
			{
				try {
					PopUpManager.removePopUp(ttlWndw);
				}
				catch(err:Error) {}
				try {
					PopUpManager.removePopUp(askWndw);
				}
				catch(err:Error) { }
			}
			
			private function reviewPoll():void 
			{
				//debug2("reviewPoll Q: " + currQuestion + " P: " + pollId);
				simplePollDataServiceDestination.getPollAnswers(visitId, int(pollId), int(currQuestion));				
			}
			
			// there ARE results so show "Review Button"
			private function showDataResults(ev:ResultEvent):void 
			{	
				debug("SHOW RESULTS ");
				try {
					localSo = SharedObject.getLocal("ccmpolling");
					soArray = localSo.data.pollResults["question"+currQuestion];
					//debug2("LEN: " + soArray.length.toString());
					//debug2(ev.result[0].pollId + " **** " + ev.result[0].questionId);
					
					if((soArray.length > 0) || (ev.result[0] != null)){
						debug2("there is data");
						//dataExists = true;
						// check if this poll question has been answered
						createReviewButton(ev);
						doReviewState();
					} else {
						//re-enable btnBox
						debug("No results");
						//dataExists = false;
						btnGroup.removeElement(revBtn);
						//modTimer = new Timer(1000);
						//// handler at end of code
						//modTimer.addEventListener(TimerEvent.TIMER, onModTimer);
						//modTimer.start();
						undoReviewState();
					}
				}
				catch(err:Error) { 
					undoReviewState();
				}
				
			}
			
			private function onModTimer(ev:TimerEvent):void 
			{
				debug("data: "+dataExists.toString());
				if(dataExists) {
					doReviewState();
				} else {
					undoReviewState();
				}
				modTimer.stop();
			}
			
			protected function createReviewButton(ev:ResultEvent):void 
			{
				debug3("show REVIEW button");
				reviewResults = ev.result as ArrayCollection;
				revBtn = new Button();
				revBtn.visible = true;
				revBtn.label = "Review Results";
				revBtn.styleName = "myButtonReview";
				revBtn.addEventListener(MouseEvent.CLICK, showReviewGraph);
				btnGroup.addElement(revBtn);
			}
			
			// show fault
			private function showFault(ev:FaultEvent):void 
			{
				debug("showFault: " + ev.fault.faultString);
				//Alert.show("Fault:" + ev.fault.faultString);
			}
			// QuestionsService Result
			private function showQuestionResults(ev:ResultEvent):void 
			{
				debug("QUESTIONS LOADED");
				try {
					questionsArray = ev.result as ArrayCollection;	
					
					//Alert.show(questionsArray.length.toString());
					//Alert.show("*** " + questionsArray[0].questionStr);
					// make sure text input is not null
					//if((questionsArray[0].questionStr != null) && (onQuestion == "false")){
						if(questionsArray[0].questionStr != null){
						createMenu();		
					}
					
					
					
				} 
				catch(err:Error) {
					debug("ERROR : " + err.message + " "+ err.name);
				}
				finally {
					//questionsArray = null;
				}
				
			}
			// AnswersService Result
			private function showAnswersResults(ev:ResultEvent):void 
			{
				
				try{
					
					debug2("showAnswersResults ");
					//Alert.show(ev.result as String);
					answersArray = ev.result as ArrayCollection;
					if(!firstRun) {
						setUpAnswers();
					}
					
				}
				catch(err:Error) {
					//Alert.show(err.message);
				}
				
				
			}
			// PollChoiceService Result
			private function showChoiceResults(ev:ResultEvent):void 
			{
				debug("showChoiceResults");
				pollsArray = null;
				var tempAC:ArrayCollection = ev.result as ArrayCollection;
				pollsArray = deleteDupes(tempAC);	
				pollsArray = makeCollectionFriendly(pollsArray);
				
			}
			
			private function deleteDupes(ac:ArrayCollection):ArrayCollection {
				for(var i:int=0; i<ac.length; i++)
				{
					for(var j:int = (i+1); j <ac.length; j++)
					{
						if(ac[i].pollId==ac[j].pollId)
						{
							ac.removeItemAt(j);
							j-=1;
						} 
					}
				}
				
				return ac;
			}
			
			private function makeCollectionFriendly(ac:ArrayCollection):ArrayCollection {
				var friendlyAC:ArrayCollection = new ArrayCollection();
				for(var i:int=0; i<ac.length; i++)
				{
					if(ac[i].pollId == "9999") {
						friendlyAC.addItem({label:"LIVE Questions", data:"9999"});
					} else {
						friendlyAC.addItem({label:"Event Questions "+(i+1), data:ac[i].pollId});
					}
				}
				return friendlyAC;
			}
			
			private function showReviewGraph(ev:Event):void {
				
				totalAnswers = soArray.length;
				grandTotal = 0;
				
				for(var j:int = 0; j < soArray.length; j++) {
					grandTotal = grandTotal + soArray[j].total;
				}
				
				// based on total num of questions, show hide data/buttons etc...
				switch(totalAnswers) {
					case 2:
						myData[0] = soArray[0];
						myData[1] = soArray[1];
						break;
					case 3:
						myData[0] = soArray[0];
						myData[1] = soArray[1];
						myData[2] = soArray[2];
						break
					case 4:
						myData[0] = soArray[0];
						myData[1] = soArray[1];
						myData[2] = soArray[2];
						myData[3] = soArray[3];
						break;
					case 5:
						myData[0] = soArray[0];
						myData[1] = soArray[1];
						myData[2] = soArray[2];
						myData[3] = soArray[3];
						myData[4] = soArray[4];
						break;
				}
				
				ttlWndw = PopUpManager.createPopUp(this, TitleWin, false, PopUpManagerChildList.PARENT) as TitleWin;
				ttlWndw.alpha = 1.0;	
				// hide results
				ttlWndw.myChart.visible = false;
				// center or put to right?
				PopUpManager.centerPopUp(ttlWndw);
				// close Button
				ttlWndw.closeBtn.label = "Close Results";
				ttlWndw.addEventListener(CustomEvent.ON_CLOSE_POP, doClose);				
				ttlWndw.countTxt.text = String(grandTotal);
				// change order
				ttlWndw.myChart.dataProvider = myData;
				ttlWndw.myCat.dataProvider = myData;	
				
				if(hideResults == "true") {
					ttlWndw.showBtn.label = "Show Results";
					ttlWndw.addEventListener(CustomEvent.ON_SHOW_RESULTS, doShowResults);
				} else {
					ttlWndw.showBtn.visible = false;
					ttlWndw.myChart.visible = true;
					ttlWndw.ttlWndwBtns.x = 250;
				}
				
			}
			
			// reset all totals and data provider
			private function resetData():void 
			{
				myData = new Array();
				totalAnswers = 0;
				runningTotalA = 0;
				runningTotalB = 0;
				runningTotalC = 0;
				runningTotalD = 0;
				runningTotalE = 0;
				grandTotal = 0;	
				nc.call("updateIndex", null, undefined);
				try {
					ttlWndw.countTxt.text = "0";
					ttlWndw.myCat.dataProvider = myData;
				}
				catch(err:Error) {}
			}
			
			// close window, save SO, save data to db
			public function doClose(ev:Event):void 
			{
				nc.call("sendMessage", null, "menu");
				
				if(reviewMode == "false") {
					localSo.data.pollResults["question"+currQuestion] = myData;
					localSo.flush();
					saveToMySQL();					
				}
				// mark as "answered" via style. Also, done in "createMenu()" method
				currButton.styleName = "myButtonReviewMenu";	
				debugText.visible = true;	
			}
			
			// handle menu
			private function handleMenuState():void 
			{	
				try{
					simplePollChoiceServiceDestination.getPollIds();
				}
				catch(err:Error) {}
				
				try {		
					// go to 'menu' state
					currentState = 'menu';
					menuGroup.visible = true;
					resetData();
					hidePopGraph();
					btnBox.removeAllElements();
					//onQuestion = "false";
					removeElement(btnBox);
					undoReviewState();
					// this breaks build... not sure why it was in there?????
					//nc.all("updateQuestion", null, undefined);				
				}
				catch(err:Error) {
					debug("Error handle menu state P: " + err.message);
				}				
			}
			
			
			// exit Btn 
			private function doExit(ev:Event):void 
			{
				try {
					nc.call("sendMessage", null, "QUIT");
				}
				catch(err:Error) {}
			}
			
			// debug convenience
			private function debug(val:String):void 
			{
				// output window (if visible)
				debugText.text += "\n>>"+  val;
			}
			// debug convenience
			private function debug2(val:String):void 
			{
				// output window (if visible)
				//debugText.text += "\n>>"+  val;
			}
			private function debug3(val:String):void 
			{
				// output window (if visible)
				//debugText.text += "\n>>"+  val;
			}
			//*********************************************************************************************
			// REVIEW FUNCTIONS
			private function doReviewState():void 
			{
				debug("doReviewState");
				nc.call("updateReviewMode", null, "true");
			}
			
			private function undoReviewState():void 
			{
				debug("undoReviewState");
				nc.call("updateReviewMode", null, "false");
			}
			
			//*********************************************************************************************
			// clean up Shared Ojects
			private function cleanupSO():void 
			{
				debug("cleanUpSO");
				try {		
					nc.call("clearSO", null, null);
					soQ.close();
					so.close();
					soTot.close();
					soP.close();
					soIdx.close();
					soRev.close();
				}
				catch(err:Error) { }			
			}
			
			
			// Timer handler every 60s; keep connected to Red5
			private function onTimer(evt:TimerEvent):void {
				try {
					if (nc.connected == false) {
						connected = false;
						setUpNetConnection();
					}
				}
				catch(err:Error) {}
			}
			
			// Save to MySQL
			private function saveToMySQL():void 
			{
				localSo = SharedObject.getLocal("ccmpolling");
				soArray = localSo.data.pollResults["question"+currQuestion];
				for(var j:int = 0; j < soArray.length; j++) {
					//debug("***** " + visitId + " \n" + currPoll + " \n" + currQuestion + " \n" + soArray[j].label + " \n" + soArray[j].total + "\n" + soArray[j].myPct + "\n");
					// INSERT MYSQL VIA BLAZE DS SERVICE ON TOMCAT						
					simplePollDataServiceDestination.setPollAnswers(visitId, currPoll, currQuestion, soArray[j].label, soArray[j].total, soArray[j].myPct) ;
				}
			}		
			
			protected function doDropChange(ev:IndexChangeEvent):void
			{
				// now query pollquestions for specific pollId
				pollSync = false;
				nc.call("updatePoll", null, pollDrop.selectedItem.data );			
			}
			protected function doTitleChange(ev:IndexChangeEvent):void 
			{
				/*localSo.data.participantTitle = titlesDrop.selectedItem;
				localSo.flush();
				fadeTitle.play();
				setUpNetConnection();*/
			}
			
			// keeps "Choose poll:" drop down in sync with RSO currPoll
			protected function onDropUpdate(ev:FlexEvent):void 
			{
				try {
					if(currPoll < 9999) {					
						pollDrop.selectedIndex  = currPoll - 1;
					} else {
						pollDrop.selectedIndex = pollsArray.length-1;
					}
				}
				catch(err:Error) {}
			}
			
			// ShowResults button handler
			public function doShowResults(ev:CustomEvent):void 
			{
				try {
					ttlWndw.myChart.visible = true;
				}
				catch(err:Error) {}			
			}
			
			// show results flag 
			private function onToggleResultsFlag():void
			{
				if(resultsFlag.selected) {
					//resultsFlag.selected = true;
					hideResults = "true";
				} else {
					//resultsFlag.selected = false;
					hideResults = "false";
				}
			}
			private function doReset():void 
			{
				nc.call("updateReviewMode", null, "false");
			}
			private function doResetQuestion():void 
			{
				localSo = SharedObject.getLocal("ccmpolling");
				delete localSo.data.pollResults["question"+currQuestion];
				localSo.flush();
				createMenu();
				nc.call("sendMessage", null, "back");
			}
			private function doClientRefresh():void 
			{
				nc.call("sendMessage", null, "pageRefresh");
			}
			private function doHelp():void 
			{
				
				if(!helpOn) {
					fadeHelpOpen.play();
					help.source="assets/adminIconUp.png"		
					helpOn = true;
				} else {
					fadeHelpClose.play();
					help.source = "assets/adminIcon.png"
					helpOn = false;
				}
					
			}
			/*private function refreshLiveDrop():void 
			{
				simplePollQuestionServiceDestination.getPollQuestions(9999);
				pollDrop.selectedItem = "LIVE Questions";
				pollDrop.invalidateDisplayList();
			}*/
			private function refreshLive(ev:MouseEvent):void 
			{
				nc.call("updatePoll", null, 9999 );
				pollDrop.selectedIndex = pollsArray.length-1;
			}
		]]>
	</fx:Script>
	
	<s:layout.questions>
		<s:BasicLayout/>
	</s:layout.questions>
	<s:layout.start>
		<s:BasicLayout/>
	</s:layout.start>
	<s:Image id="help" includeIn="questions,menu,title" source="@Embed(source='assets/adminIcon.png')" x="1130" y="20"  width="47" height="47" click="doHelp()" />
	<s:VGroup id="helpBtns" alpha="0.0" x="1120" y="70">
		<s:Button includeIn="questions,menu,title" id="hiddenBtn" label="Enable Clients"  x="1110" y="20" width="135" height="20" click="doReset()"   />
		<s:Button includeIn="questions,menu,title" id="resetBtn" label="Re-enable Question"  x="1110" y="50" width="135" height="20" click="doResetQuestion()"   />
		<s:Button includeIn="questions,menu,title" id="refreshBtn" label="Refresh Clients"  x="1110" y="80" width="135" height="20" click="doClientRefresh()"   />
	</s:VGroup>

	<!--<s:TextArea id="questionTxt" includeIn="questions" left="53" top="51" width="1065" height="155"
				editable="false" enabled="true" selectable="false"/>-->
	<s:Image includeIn="questions" left="15" top="30" alpha="0.3" backgroundAlpha="1.0" smooth="true"
			 source="@Embed('assets/q.png')"/>
	<s:Image includeIn="questions" bottom="12" horizontalCenter="19" smooth="true"
			 source="@Embed('assets/touch.png')"/>
	<s:Image includeIn="questions" right="49" bottom="43" smooth="true"
			 source="@Embed('assets/ccmSm.png')"/>
	<s:Image id="splash" includeIn="start" horizontalCenter="0" smooth="true"
			 source="@Embed('assets/splashScreen.png')" verticalCenter="-30"/>
	
	<s:TextArea id="outputTf" includeIn="menu,questions,start,title" visible="false" x="1074" y="20"
				width="301" height="264" color="#10EBB5" contentBackgroundColor="#181E1B"
				fontFamily="Arial" fontSize="11"
				x.menu="1101" y.menu="34" width.menu="183" height.menu="535"
				contentBackgroundAlpha.menu="0.79"
				x.questions="1116" y.questions="30" width.questions="214" height.questions="413"
				contentBackgroundAlpha.questions="0.8"/>
	<s:VGroup id="btnBox" includeIn="questions" x="53" y="214" width="1247" height="390">
		
	</s:VGroup>
	
	<s:SWFLoader id="bgImage" includeIn="menu,title" x="0" y="0"/>
	
	<s:Group id="menuGroup" includeIn="menu" x="42" y="287" width="1021" height="262">
		<s:layout>
			<s:TileLayout horizontalAlign="center" horizontalGap="14" paddingTop="50"
						  requestedColumnCount="6" verticalAlign="middle" verticalGap="14"/>
		</s:layout>
	</s:Group>
	
	<s:Group id="askGroup" includeIn="menu" x="42" y="550" width="1021" height="80">
		<s:layout>
			<s:HorizontalLayout horizontalAlign="center" verticalAlign="middle"/>
		</s:layout>
	</s:Group>
	
	<s:Label id="date" includeIn="menu" x="50" y="180" width="600" color="red" fontFamily="Gotham"
			 fontSize="22" text="{date_str}"/>
	<s:Label id="title" includeIn="menu" x="50" y="210" width="600" color="#6e6e6e"
			 fontFamily="Gotham" fontSize="24" text="{myTitle}"/>
	
	<s:HGroup id="chooseGroup" includeIn="menu" x="600" y="270" width="1320" height="200">
		<s:Spacer width="101" height="16"/>
		<s:Label includeIn="menu" color="#565656" fontSize="18" text="Choose poll:"/>
		<s:DropDownList id="pollDrop" includeIn="menu" width="241" change="doDropChange(event)"
						dataProvider="{pollsArray}" labelField="label" requireSelection="true"
						updateComplete="onDropUpdate(event)"></s:DropDownList><s:Spacer width="4"/>
		<s:Button id="liveBtn"  click="refreshLive(event)" styleName="myRefreshStyle" />
		<s:Spacer width="5" height="16"/>
		<s:CheckBox id="resultsFlag" x="100" label="Hide Results" click="onToggleResultsFlag()"
					color="#565656" fontSize="12" selected="false"/>

	</s:HGroup>
	
	
	
	
	<s:TextArea id="debugText" includeIn="start, menu, questions" x="1300" y="10" width="350"
				height="600" color="0x8fe613" contentBackgroundAlpha="0.8"
				contentBackgroundColor="0x000000" fontSize="11" includeInLayout="true"/>
	
	
</s:Application>