<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:services="services.*"
			   backgroundColor="#3f403e" creationComplete="fadeSplashShow.play();init(event)"
			   currentState="start"
			   height.menu="688"
			   width.pool="100%" height.pool="100%"
			   width.questions="100%" height.questions="100%"
			   width.start="1200" height.start="100%">
	
	<s:states>
		<s:State name="start"/>
		<s:State name="questions"/>
		<s:State name="menu"/>
		<s:State name="title"/>
		<s:State name="pool"/>
		<s:State name="choosepoll"/>
	</s:states>
	
	<fx:Declarations>
		<s:Sequence id="fadeSplashHide" duration="2000" effectEnd="initializeRole();"
					target="{splash}">
			<s:Fade id="fadeHide" alphaFrom="1.0" alphaTo="0.0"/>
			<s:Resize id="resizeHide" heightTo="0" widthTo="0"/>
		</s:Sequence>        
		
		<s:Parallel id="fadeSplashShow" duration="2000" target="{splash}">
			<s:Fade id="fadeShow" alphaFrom="0.0" alphaTo="1.0"/>
		</s:Parallel>
		
		
		
		<s:Sequence id="fadeTitle" duration="2000" effectEnd="currentState='pool'" target="">
			<s:Fade id="fadeTitleHide" alphaFrom="1.0" alphaTo="0.0"/>
		</s:Sequence> 
		
		<s:CallResponder id="getPollAnswersResult"/>
		<!--<services:SimplePollDataServiceDestination id="simplePollDataServiceDestination"
		fault="showFault(event)"
		result="showDataResults(event)"
		showBusyCursor="true"/>-->
		<services:SimplePollQuestionServiceDestination id="simplePollQuestionServiceDestination"
													   fault="showFault(event)"
													   result="showQuestionResults(event)"
													   showBusyCursor="true"/>
		<services:SimplePollAnswersServiceDestination id="simplePollAnswersServiceDestination"
													  fault="showFault(event)"
													  result="showAnswersResults(event)"
													  showBusyCursor="true"/>
		<services:SimplePollChoiceServiceDestination id="simplePollChoiceServiceDestination"
													 fault="showFault(event)"
													 result="showChoiceResults(event)"
													 showBusyCursor="true"/>
		<s:CallResponder id="getPollQuestionsResult"/>
		
	</fx:Declarations>
		<fx:Style>
		@namespace s "library://ns.adobe.com/flex/spark";
		@namespace mx "library://ns.adobe.com/flex/mx";
		
		@font-face {
			src: url("skins/Gotham-Book.ttf");
			fontFamily: "Gotham";
			embedAsCFF: true;
		}
		
		@font-face {
			src: url("skins/Gotham-Bold.ttf");
			fontFamily: "GothamBold";
			embedAsCFF: true;
		}
		
		s|TextArea {
			backgroundAlpha: 0.0;
			fontFamily: Gotham;
			fontSize:26;
			color: #cecece;
			contentBackgroundColor:black;
			contentBackgroundAlpha: 0.2;
			paddingTop: 20;
			paddingLeft: 20;
		}
		.labelText {
			fontFamily: Gotham;
			fontSize:24;
			color: #cecece;
			labelPosition:inside;
			z-index: 22;
		}
		.myButtonReview { 
			skinClass:ClassReference("skins.SmallerButton"); 
		}
		
	</fx:Style>
	
	<fx:Metadata>
		[Event(name="customClose", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			//import flash.display.Loader;
			import flash.events.Event;
			import flash.events.MouseEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.core.FlexGlobals;
			import mx.core.IFlexDisplayObject;
			import mx.events.CloseEvent;
			import mx.events.DataGridEvent;
			import mx.events.DropdownEvent;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.components.Button;
			import spark.components.HGroup;
			import spark.formatters.DateTimeFormatter;
			
			import events.GridEvent;
			
			import utils.Red5Connection;
			//import utils.StringHelper;
			
			//import vo.ResponseObject;
			
			private var pollId:int;
			private var visitId:String;
			private var skinFile:String;			
			private var questionStr:String;
			private var connected:Boolean = false;
			private var timer:Timer;
			private var adminTimer:Timer;
			private var totalAnswers:int = 0;
			public var nc:Red5Connection;
			private var answersTemplate:String;
			private var testLabels:Array = ["A", "B", "C", "D", "E"];
			private var answersAgreeDisagreeArray:Array = ["Agree", "Disagree"];
			private var answersAgreeScaleArray:Array = ["Strongly Agree", "Agree", "Neutral", "Disagree", "Strongly Disagree"];
			private var answersYesArray:Array =  ["Yes", "No"];
			private var answersScaleArray:Array = ["(1)", "(2)", "(3)", "(4)", "(5)"];
			private var answersNumberOfTimesArray:Array = ["1-5", "6-10", "11-20", "21-100", ">100"];			
			private var ip:String;
			private var pushedBool:Boolean;
			private var rowIndex:Number;
			
			[Bindable]
			private var questionsArray:ArrayCollection = new ArrayCollection(); 
			
			[Bindable]
			private var pollsArray:ArrayCollection;
			
			
			private function init(ev:FlexEvent):void 
			{			
				// init some vars
				debugText.visible = true;	
				
				// NC connect/disconnect Timer
				startTimer();
				
				// now hide splash screen
				fadeSplashHide.play();	
			}
			
			private function startTimer():void {
				// every 60s
				//timer = new Timer(60000);
				// handler at end of code
				//timer.addEventListener(TimerEvent.TIMER, onTimer);
				//timer.start();
			}
			
			protected function initializeRole():void 
			{
				// Flashvars initialize vars
				ip = FlexGlobals.topLevelApplication.parameters.ipAddress;
				
				setUpNetConnection();
				currentState = 'pool';
				
				// every 20s up date DataGrid
				// DG acted weird on too short of an update...
				//adminTimer = new Timer(20000);
				//adminTimer.addEventListener(TimerEvent.TIMER, onAdminTimer);
				//adminTimer.start();
				trace("testing trace log");
				
				
			}
			// decided to go with a sync event via Red 5 versus a timer...
			private function onAdminTimer(evt:TimerEvent):void {
				// refreshes DG
				getPollQuestionsResult.token = simplePollQuestionServiceDestination.getUnpublishedPollQuestions(9999);				
			}
			
			private function loadQuestions(val:int):void 
			{
				// pass Poll id (9999 are the participant polls)
				simplePollQuestionServiceDestination.getPollQuestions(val);		
			}
			
			// listeners
			private function configureListeners(dispatcher:IEventDispatcher):void {
				//dispatcher.addEventListener(Event.COMPLETE, completeHandler);
				dispatcher.addEventListener(Event.OPEN, openHandler);
				dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
				dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
				dispatcher.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);
				dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);			
			}
			
			// set up MC
			private function setUpNetConnection():void {
				debug("set up connection");
				// NetConnection Singleton
				nc = new Red5Connection();
				// we only own 60 tablets, cushion
				nc.maxPeerConnections = 80;
				nc.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
				nc.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityNCErrorHandler);
				
				//
				// rtmp uses 1935, so don't put in 5030 here. duh
				nc.connect("rtmp://"+ip+"/SimplePoll");
				nc.client = this;
			}
			// NetConnection handlers
			private function netStatusHandler(event:NetStatusEvent):void 
			{
				if(nc.connected) {
					debug("connected to Red5 " + nc.maxPeerConnections + " uri: " + nc.uri);
					trace("connected to Red5");
					connected = true;
				} else {
					debug("Could not connect to media server.");
					connected = false;
				}					
			}
			
			private function securityNCErrorHandler(event:SecurityErrorEvent):void 
			{
				debug("NO RED 5");
			}
			
			private function openHandler(event:Event):void {
				trace("openHandler: " + event);
			}
			
			private function progressHandler(event:ProgressEvent):void {
				trace("progressHandler loaded:" + event.bytesLoaded + " total: " + event.bytesTotal);
			}
			
			private function securityErrorHandler(event:SecurityErrorEvent):void {
				trace("securityErrorHandler: " + event);
			}
			
			private function httpStatusHandler(event:HTTPStatusEvent):void {
				trace("httpStatusHandler: " + event);
			}
			
			private function ioErrorHandler(event:IOErrorEvent):void {
				trace("ioErrorHandler: " + event);
			}
			
			// Receive from server, sent from presenter
			public function receiveMessage(val:String):void 
			{
				//Alert.show("RECEIVE: " + val);
				switch(val) {
					case "QUIT":
						try{
							
						}
						catch(err:Error) {}
						break;
					case "reviewtrue":
						
						
						break;
					case "reviewfalse":
						
						
						break;
					case "menu":
						
						break;
					case "push":
						
						break;
					case "back":
						
						break;
					case "refresh":
						
						break;
					case "disable":
						
						break;
					default:
						break;
					
				}
				
			}			
			
			// need these for NC, not used
			public function onBWDone(... rest) : void {
				// have to have this for an RTMP connection
				trace('onBWDone');
			}
			
			public function onBWCheck(... rest) : uint {
				trace('onBWCheck');
				//have to return something, so returning anything :)
				return 0;
			} 
			
			// show fault
			private function showFault(ev:FaultEvent):void 
			{
				debug("showFault: " + ev.fault.faultString);
				//Alert.show("Fault:" + ev.fault.faultString);
			}
			// QuestionsService Result
			private function showQuestionResults(ev:ResultEvent):void 
			{
				debug("QUESTIONS LOADED");
				try {
					questionsArray = ev.result as ArrayCollection;	
					
					if(ev.result > 0) {
						
						simplePollQuestionServiceDestination.getUnpublishedPollQuestions(9999);
						// refreshes DG
						getPollQuestionsResult.token = simplePollQuestionServiceDestination.getUnpublishedPollQuestions(9999);
						// sends 'push' message to other subscribers
						//nc.call("sendMessage", null, "push");
					}
				} 
				catch(err:Error) {
					debug("ERROR : " + err.message + " "+ err.name);
				}
				finally {
					//questionsArray = null;
				}
				
			}
			// AnswersService Result
			private function showAnswersResults(ev:ResultEvent):void 
			{
				
				try{
					nc.call("sendMessage", null, "push");
					// delete DataGrid row	
					questionsArray.removeItemAt(rowIndex);
					getPollQuestionsResult.token = simplePollQuestionServiceDestination.getUnpublishedPollQuestions(9999);
					pushedBool = false;
				}
				catch(err:Error) {
					//Alert.show(err.message);
				}
				
				
			}
			// PollChoiceService Result
			private function showChoiceResults(ev:ResultEvent):void 
			{
				debug("showChoiceResults");
				pollsArray = null;
				var tempAC:ArrayCollection = ev.result as ArrayCollection;
				pollsArray = deleteDupes(tempAC);	
				pollsArray = makeCollectionFriendly(pollsArray);
			}
			
			private function deleteDupes(ac:ArrayCollection):ArrayCollection {
				for(var i:int=0; i<ac.length; i++)
				{
					for(var j:int = (i+1); j <ac.length; j++)
					{
						if(ac[i].pollId==ac[j].pollId)
						{
							ac.removeItemAt(j);
							j-=1;
						} 
					}
				}
				
				return ac;
			}
			
			private function makeCollectionFriendly(ac:ArrayCollection):ArrayCollection {
				var friendlyAC:ArrayCollection = new ArrayCollection();
				for(var i:int=0; i<ac.length; i++)
				{
					if(ac[i].pollId == "9999") {
						friendlyAC.addItem({label:"Event Questions", data:"9999"});
					} else {
						friendlyAC.addItem({label:"Live Questions "+(i+1), data:ac[i].pollId});
					}
				}
				return friendlyAC;
			}
			
			
			// debug convenience
			private function debug(val:String):void 
			{
				// output window (if visible)
				debugText.text += "\n>>"+  val;
			}
			// debug convenience
			private function debug2(val:String):void 
			{
				// output window (if visible)
				debugText.text += "\n>>"+  val;
			}
			private function debug3(val:String):void 
			{
				// output window (if visible)
				debugText.text += "\n>>"+  val;
			}
			
			// Timer handler every 60s; keep connected to Red5
			private function onTimer(evt:TimerEvent):void {
				try {
					if (nc.connected == false) {
						connected = false;
						setUpNetConnection();
					}
				}
				catch(err:Error) {}
			}
			
			
			protected function poolDG_creationCompleteHandler(event:FlexEvent):void
			{
				getPollQuestionsResult.token = simplePollQuestionServiceDestination.getUnpublishedPollQuestions(9999);
				event.target.addEventListener(GridEvent.ON_DELETE_QUESTION, onDeleteQuestion);
				event.target.addEventListener(GridEvent.ON_PUSH_QUESTION, onPushQuestion);
				event.target.addEventListener(GridEvent.ON_DROP_DOWN, onDropDown);
				
			}
			
			protected function onPoolState(ev:MouseEvent):void 
			{
				currentState = 'pool';
			}
			
			protected function onDropDown(ev:GridEvent):void 
			{
				answersTemplate = ev.target.dgDropdown.selectedItem.value;
			}
			
			public function onDeleteQuestion(ev:GridEvent):void 
			{
				// delete DataGrid row
				questionsArray.removeItemAt(poolDG.selectedIndex);
				
				// delete MySQL row
				simplePollQuestionServiceDestination.deletePollQuestions(int(ev.target.label));
			}
			
			public function onPushQuestion(ev:GridEvent):void 
			{

					try{
						pushedBool = true;
						rowIndex = poolDG.selectedIndex;
						// depending on answer template chosen, push answers to answer table. Then, push new poll
						saveUserQuestionAnswers(ev.target.label, answersTemplate);	
						
						// "mark" the question as published
						simplePollQuestionServiceDestination.updatePollQuestions(int(ev.target.label));
						
						// alert Mod only
						//nc.call("sendMessage", null, "userPush");		
					}
					catch(err:Error) {}
			}
			
			
			protected function saveUserQuestionAnswers(questId:String, template:String):void 
			{
				debug(" Save submitted answers with associated question... ");
				var tempAnswerArray:Array = new Array();
				
				switch(template) {
					case "agree":
						tempAnswerArray = answersAgreeDisagreeArray;
						break;
					case "agreefivepoint":
						tempAnswerArray = answersAgreeScaleArray;
						break;
					case "yes":
						tempAnswerArray = answersYesArray;
						break;
					case "scale":
						tempAnswerArray = answersScaleArray;
						break;
					case "number":
						tempAnswerArray = answersNumberOfTimesArray;
						break;
					case "open":
						tempAnswerArray = [];
						break;
					default:
						// by default, answers are empty
						tempAnswerArray = [];
						break;
				}
				// now populate database
				for(var i:int = 0; i < tempAnswerArray.length; i++) {
					simplePollAnswersServiceDestination.setPollAnswers(int(questId), testLabels[i], tempAnswerArray[i]); 
				}
			}
			
			// Button handlers/ Alert windows Yes/No
			protected function cleanPublished(ev:MouseEvent):void 
			{
				Alert.show("Do you want to delete all published live questions?", "Save Changes", Alert.YES|Alert.NO, this, alertClickHandler);
			}
			
			private function alertClickHandler(evt:CloseEvent):void {
				if (evt.detail == Alert.YES) {
					simplePollQuestionServiceDestination.cleanupPollAnswers();
					nc.call("sendMessage", null, "userPush");
				}
			}
			protected function cleanUnpublished(ev:MouseEvent):void 
			{
				Alert.show("Do you want to delete all unpublished live questions?", "Save Changes", Alert.YES|Alert.NO, this, alertClickHandlerB);
			}
			
			private function alertClickHandlerB(evt:CloseEvent):void {
				if (evt.detail == Alert.YES) {
					simplePollQuestionServiceDestination.deleteUserQuestions();
					nc.call("sendMessage", null, "userPush");
				}
			}
			
			private function doRefresh(ev:MouseEvent):void
			{
				getPollQuestionsResult.token = simplePollQuestionServiceDestination.getUnpublishedPollQuestions(9999);	
			}
		]]>
	</fx:Script>
	
	<s:layout.questions>
		<s:BasicLayout/>
	</s:layout.questions>
	<s:layout.start>
		<s:BasicLayout/>
	</s:layout.start>
	<s:layout.pool>
		<s:BasicLayout/>
	</s:layout.pool>
	
	<mx:VBox id="qBox" includeIn="pool,questions" horizontalCenter="10" verticalCenter="0"
			 width.pool="1000" height.pool="90%" horizontalCenter.pool="10" verticalCenter.pool="0">
		<s:Label includeIn="pool" color="0xffffff" fontSize="18"
				 text="Polling Administrator/LIVE QUESTIONS"/>
		<s:DataGrid id="poolDG" includeIn="pool" width="1000" height="90%"
					creationComplete="poolDG_creationCompleteHandler(event)" requestedRowCount="4"
					sortableColumns="true">
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="questionStr" headerText="Question"></s:GridColumn>
					<s:GridColumn dataField="pollDate" headerText="Updated" sortable="true"></s:GridColumn>
					<s:GridColumn id="drop" width="120" headerText="Template"
								  itemRenderer="DropDownRenderer"></s:GridColumn>
					<s:GridColumn id="pushCol" width="100" dataField="questionId" headerText="Action"
								  itemRenderer="PushRenderer"></s:GridColumn>
					<s:GridColumn id="delCol" width="100" dataField="questionId" headerText="Action"
								  itemRenderer="DeleteRenderer"></s:GridColumn>
				</s:ArrayList>
			</s:columns>
			<s:typicalItem>
				<fx:Object pollDate="pollDate1" pollId="pollId1" questionId="questionId1"
						   questionStr="questionStr1"></fx:Object>
			</s:typicalItem>
			<s:AsyncListView id="poolAsync" list="{getPollQuestionsResult.lastResult}"/>
		</s:DataGrid>
		<s:HGroup id="maintBtns" x="20" y="20">
			<s:Button id="cleanPub" height="30" label="Clean Live Published"
					  click="cleanPublished(event)" styleName="myButtonReview"/>
			<s:Spacer id="spac" width="10"/>
			<s:Button id="cleanUnpub" height="30" label="Clean Live Unpublished"
					  click="cleanUnpublished(event)" styleName="myButtonReview"/>
			<s:Spacer id="spac2" width="10"/>
			<s:Button id="refreshBtn" height="30" label="Refresh Results" styleName="myButtonReview" click="doRefresh(event)" />
		</s:HGroup>
	</mx:VBox>
	
	
	<s:Image includeIn="pool" right="49" bottom="43" smooth="true"
			 source="@Embed('assets/ccmSm.png')"/>
	
	<s:Image id="splash" includeIn="start" horizontalCenter="0" smooth="true"
			 source="@Embed('assets/splashScreen.png')" verticalCenter="-30"/>
	
	<s:TextArea id="outputTf" includeIn="pool" visible="false" x="1074" y="20" width="301"
				height="264" color="#10EBB5" contentBackgroundColor="#181E1B" fontFamily="Arial"
				fontSize="11"
				x.menu="1101" y.menu="34" width.menu="183" height.menu="535"
				contentBackgroundAlpha.menu="0.79"
				x.pool="1116" y.pool="30" width.pool="214" height.pool="413"
				contentBackgroundAlpha.pool="0.8"
				x.questions="1116" y.questions="30" width.questions="214" height.questions="413"
				contentBackgroundAlpha.questions="0.8"/>
	
	
	<s:TextArea id="debugText" includeIn="start, menu, questions" x="1300" y="10" width="350"
				height="600" color="0x8fe613" contentBackgroundAlpha="0.8"
				contentBackgroundColor="0x000000" fontSize="11" includeInLayout="true"/>
	
	
</s:Application>